// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	content "github.com/owncloud/ocis/v2/services/search/pkg/content"

	mock "github.com/stretchr/testify/mock"

	providerv1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
)

// Extractor is an autogenerated mock type for the Extractor type
type Extractor struct {
	mock.Mock
}

// Extract provides a mock function with given fields: ctx, ri
func (_m *Extractor) Extract(ctx context.Context, ri *providerv1beta1.ResourceInfo) (content.Document, error) {
	ret := _m.Called(ctx, ri)

	var r0 content.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *providerv1beta1.ResourceInfo) (content.Document, error)); ok {
		return rf(ctx, ri)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *providerv1beta1.ResourceInfo) content.Document); ok {
		r0 = rf(ctx, ri)
	} else {
		r0 = ret.Get(0).(content.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *providerv1beta1.ResourceInfo) error); ok {
		r1 = rf(ctx, ri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExtractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtractor creates a new instance of Extractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtractor(t mockConstructorTestingTNewExtractor) *Extractor {
	mock := &Extractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
