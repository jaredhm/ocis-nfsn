// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	providerv1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	mock "github.com/stretchr/testify/mock"

	userv1beta1 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"

	v0 "github.com/owncloud/ocis/v2/protogen/gen/ocis/services/search/v0"
)

// Searcher is an autogenerated mock type for the Searcher type
type Searcher struct {
	mock.Mock
}

// IndexSpace provides a mock function with given fields: rID, uID
func (_m *Searcher) IndexSpace(rID *providerv1beta1.StorageSpaceId, uID *userv1beta1.UserId) error {
	ret := _m.Called(rID, uID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*providerv1beta1.StorageSpaceId, *userv1beta1.UserId) error); ok {
		r0 = rf(rID, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveItem provides a mock function with given fields: ref, uID
func (_m *Searcher) MoveItem(ref *providerv1beta1.Reference, uID *userv1beta1.UserId) {
	_m.Called(ref, uID)
}

// RestoreItem provides a mock function with given fields: ref, uID
func (_m *Searcher) RestoreItem(ref *providerv1beta1.Reference, uID *userv1beta1.UserId) {
	_m.Called(ref, uID)
}

// Search provides a mock function with given fields: ctx, req
func (_m *Searcher) Search(ctx context.Context, req *v0.SearchRequest) (*v0.SearchResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *v0.SearchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.SearchRequest) (*v0.SearchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.SearchRequest) *v0.SearchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.SearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.SearchRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrashItem provides a mock function with given fields: rID
func (_m *Searcher) TrashItem(rID *providerv1beta1.ResourceId) {
	_m.Called(rID)
}

// UpsertItem provides a mock function with given fields: ref, uID
func (_m *Searcher) UpsertItem(ref *providerv1beta1.Reference, uID *userv1beta1.UserId) {
	_m.Called(ref, uID)
}

type mockConstructorTestingTNewSearcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewSearcher creates a new instance of Searcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearcher(t mockConstructorTestingTNewSearcher) *Searcher {
	mock := &Searcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
